// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: Input.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AvailableServices_GetUserDetail_FullMethodName = "/go_package.AvailableServices/GetUserDetail"
)

// AvailableServicesClient is the client API for AvailableServices service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AvailableServicesClient interface {
	GetUserDetail(ctx context.Context, in *SampleMessage, opts ...grpc.CallOption) (*UserDetails, error)
}

type availableServicesClient struct {
	cc grpc.ClientConnInterface
}

func NewAvailableServicesClient(cc grpc.ClientConnInterface) AvailableServicesClient {
	return &availableServicesClient{cc}
}

func (c *availableServicesClient) GetUserDetail(ctx context.Context, in *SampleMessage, opts ...grpc.CallOption) (*UserDetails, error) {
	out := new(UserDetails)
	err := c.cc.Invoke(ctx, AvailableServices_GetUserDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AvailableServicesServer is the server API for AvailableServices service.
// All implementations must embed UnimplementedAvailableServicesServer
// for forward compatibility
type AvailableServicesServer interface {
	GetUserDetail(context.Context, *SampleMessage) (*UserDetails, error)
	mustEmbedUnimplementedAvailableServicesServer()
}

// UnimplementedAvailableServicesServer must be embedded to have forward compatible implementations.
type UnimplementedAvailableServicesServer struct {
}

func (UnimplementedAvailableServicesServer) GetUserDetail(context.Context, *SampleMessage) (*UserDetails, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserDetail not implemented")
}
func (UnimplementedAvailableServicesServer) mustEmbedUnimplementedAvailableServicesServer() {}

// UnsafeAvailableServicesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AvailableServicesServer will
// result in compilation errors.
type UnsafeAvailableServicesServer interface {
	mustEmbedUnimplementedAvailableServicesServer()
}

func RegisterAvailableServicesServer(s grpc.ServiceRegistrar, srv AvailableServicesServer) {
	s.RegisterService(&AvailableServices_ServiceDesc, srv)
}

func _AvailableServices_GetUserDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SampleMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AvailableServicesServer).GetUserDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AvailableServices_GetUserDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AvailableServicesServer).GetUserDetail(ctx, req.(*SampleMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// AvailableServices_ServiceDesc is the grpc.ServiceDesc for AvailableServices service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AvailableServices_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "go_package.AvailableServices",
	HandlerType: (*AvailableServicesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserDetail",
			Handler:    _AvailableServices_GetUserDetail_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "Input.proto",
}
